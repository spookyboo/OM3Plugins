/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QMessageBox>
#include <QFileDialog>
#include "file_resource_constants.h"
#include "file_explorer_dockwidget.h"
#include "central_dockwidget.h"

//****************************************************************************/
FileExplorerDockWidget::FileExplorerDockWidget (const QString& title, QMainWindow* parent, Qt::WindowFlags flags) :
    QDockWidget (title, parent, flags),
    mPlugin(0),
    mCentralDockWidget(0)
{
    mResourceTreeWidget = new Magus::QtResourceTreeWidget (PLUGIN_ICON_PATH);
    mResourceTreeWidget->generateUniqueResourceId(); // Start with 0

    // Custom actions
    mResourceTreeWidget->addCustomContextMenuItem(PLUGIN_CONTEXT_MENU_ACTION_ADD_DIR);
    mResourceTreeWidget->addCustomContextMenuItem(PLUGIN_CONTEXT_MENU_ACTION_REMOVE_DIR);
    mResourceTreeWidget->setDeleteResourceContextMenuItemEnabled(false);

    // Toplevel group settings
    mResourceTreeWidget->setCreateTopLevelGroupContextMenuItemEnabled(false);
    mResourceTreeWidget->setTopLevelGroupItemEditable(true);

    // Sub group settings
    mResourceTreeWidget->setCreateSubGroupContextMenuItemEnabled(false);
    mResourceTreeWidget->setSubLevelGroupItemEditable(true);

    // Assets settings
    mResourceTreeWidget->setCreateAssetContextMenuItemEnabled(false);
    mResourceTreeWidget->setImportAssetContextMenuItemEnabled(false);
    mResourceTreeWidget->setDuplicateAssetContextMenuItemEnabled(false);
    mResourceTreeWidget->setAssetItemEditable(false);

    // Handlers
    connect(mResourceTreeWidget, SIGNAL(customContextMenuItemSelected(QString, int)), this, SLOT(handleCustomContextMenuItemSelected(QString, int)));

    // Perform standard functions
    setWidget(mResourceTreeWidget);
}

//****************************************************************************/
FileExplorerDockWidget::~FileExplorerDockWidget (void)
{
}

//****************************************************************************/
void FileExplorerDockWidget::setPlugin (PluginResourceInterface* plugin)
{
    mPlugin = plugin;
}

//****************************************************************************/
void FileExplorerDockWidget::setCentralDockWidget (CentralDockWidget* widget)
{
    mCentralDockWidget = widget;
}


//****************************************************************************/
void FileExplorerDockWidget::handleCustomContextMenuItemSelected (const QString& menuItemText, int resourceId)
{
    if (menuItemText == PLUGIN_CONTEXT_MENU_ACTION_ADD_DIR)
    {
        addDirectory();
    }
    else if (menuItemText == PLUGIN_CONTEXT_MENU_ACTION_REMOVE_DIR)
    {
        mResourceTreeWidget->deleteResource(resourceId, true);
    }
}

//****************************************************************************/
void FileExplorerDockWidget::addDirectory (void)
{
    QString folder;
    QFileDialog dialog;
    dialog.setFileMode(QFileDialog::Directory);
    if (dialog.exec())
    {
        QStringList names = dialog.selectedFiles();
        folder = names.at(0);

        // Scan through alle media files
        QString fileName;
        QString fullQualifiedFileNameOrReference;

        QDirIterator dirIt(folder, QDirIterator::Subdirectories);
        while (dirIt.hasNext())
        {
            dirIt.next();
            if (QFileInfo(dirIt.filePath()).isFile())
            {
                // It is a file
                fileName = dirIt.fileName();
                fullQualifiedFileNameOrReference = folder + QString("/") + fileName;
                AssetMetaData assetMetaData;
                assetMetaData.origin = PLUGIN_NAME.toStdString();
                assetMetaData.assetId = 0; // For now it has no meaning
                assetMetaData.fullQualifiedFileNameOrReference = fullQualifiedFileNameOrReference.toStdString();
                assetMetaData.tags.push_back("test");
                mCentralDockWidget->addResource(assetMetaData);
            }
        }
    }
}

